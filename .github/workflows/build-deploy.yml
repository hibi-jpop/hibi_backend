name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    # MySQL 서비스 추가
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DATABASE_NAME }}
          MYSQL_USER: ${{ secrets.DATABASE_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3


    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      
    - name: Build with Gradle Wrapper
      run: ./gradlew build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

    - name: Upload JAR as artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: build/libs/*.jar
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: jar-file
    
    - name: Copy JAR to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "jar-file/*.jar"
        target: "~/app"
        strip_components: 1
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/app
          # 기존 서버 프로세스 찾아서 종료
          PID=$(ps -ef | grep java | grep hibi-app.jar | grep -v grep | awk '{print $2}')
          if [ ! -z "$PID" ]; then
            echo "Killing process $PID"
            kill -15 $PID
            sleep 5
            # 프로세스가 여전히 살아있다면 강제 종료
            if ps -p $PID > /dev/null; then
              kill -9 $PID
            fi
          fi
      
          # 새 JAR 파일 실행 파일로 설정
          mv *.jar hibi-app.jar

          # 환경 변수와 함께 nohup으로 서버 실행
          export DATABASE_URL='${{ secrets.DATABASE_URL }}'
          export DATABASE_NAME='${{ secrets.DATABASE_NAME }}'
          export DATABASE_USERNAME='${{ secrets.DATABASE_USERNAME }}'
          export DATABASE_PASSWORD='${{ secrets.DATABASE_PASSWORD }}'

          # 로그 파일 정리
          if [ -f nohup.out ]; then
            mv nohup.out nohup.out.$(date +%Y%m%d%H%M%S)
          fi
      
          # nohup으로 서버 실행
          nohup java -jar hibi-app.jar > nohup.out 2>&1 &
        
          echo "서버가 백그라운드에서 실행 중입니다"
          # 프로세스 실행 확인
          sleep 5
          ps -ef | grep java


